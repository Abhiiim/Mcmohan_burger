Time Complexity Analysis:

1. isEmpty() :- O(1)
2. size() :- O(1)
3. level(id) :- O(log(n))
	Explanation: O(log(n)) for searching in the avltree
4. hireOwner(id) :- O(1)
5. hireEmployee(id, bossid) :- O(log(n))
	Explanation: O(log(n)) for searching in the avltree
6. fireEmployee(id) :- O(log(n)) 
	Explanation: O(log(n)) for search and O(log(n)) for delete
			 Overall: O(log(n)) + O(log(n)) = O(log(n))
7. fireEmployee(id, bossid) :- O(log(n)) + O(size of bossid)
	Explanation: O(log(n)) for searching in the avlTree
			 O(size of bossid) for inserting all children of id to bossid
8. boss(id) :- O(log(n))
	Explanation: O(log(n)) for seaching in the avltree
9. lowestCommonBodd(id1, id2) :- O(h*log(h)), Where, h = Height of Generic Tree
	Explanation: let h1 be height of id1 and h2 be height of id2 in Generic Tree
			 Overall complexity: O(h1*log(h1)) + O(h2*log(h2)) = O(h*log(h))
			 Where, h = max(h1, h2)
10. toString(id) :- O(n*log(n))
	Explanation: O(n) for traversing all nodes in the Generic Tree
			 O(log(n)) for serching the node
			 Since we search inside the traversal loop, Hance
			 Overall complexity: O(n*log(n))